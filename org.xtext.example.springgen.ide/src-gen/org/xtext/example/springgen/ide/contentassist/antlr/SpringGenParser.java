/*
 * generated by Xtext 2.37.0
 */
package org.xtext.example.springgen.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.springgen.ide.contentassist.antlr.internal.InternalSpringGenParser;
import org.xtext.example.springgen.services.SpringGenGrammarAccess;

public class SpringGenParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SpringGenGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SpringGenGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getProjectElementAccess().getAlternatives(), "rule__ProjectElement__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getReturnTypeAccess().getAlternatives(), "rule__ReturnType__Alternatives");
			builder.put(grammarAccess.getValueTypesAccess().getAlternatives(), "rule__ValueTypes__Alternatives");
			builder.put(grammarAccess.getHttpMethodsAccess().getAlternatives(), "rule__HttpMethods__Alternatives");
			builder.put(grammarAccess.getRDBMSAccess().getAlternatives(), "rule__RDBMS__Alternatives");
			builder.put(grammarAccess.getDatabaseRelationsAccess().getAlternatives(), "rule__DatabaseRelations__Alternatives");
			builder.put(grammarAccess.getParamTransferAccess().getAlternatives(), "rule__ParamTransfer__Alternatives");
			builder.put(grammarAccess.getSpringBootProjectAccess().getGroup(), "rule__SpringBootProject__Group__0");
			builder.put(grammarAccess.getEntityRelationshipAccess().getGroup(), "rule__EntityRelationship__Group__0");
			builder.put(grammarAccess.getProjectConfigurationAccess().getGroup(), "rule__ProjectConfiguration__Group__0");
			builder.put(grammarAccess.getServerConfigurationAccess().getGroup(), "rule__ServerConfiguration__Group__0");
			builder.put(grammarAccess.getServerConfigurationAccess().getGroup_4(), "rule__ServerConfiguration__Group_4__0");
			builder.put(grammarAccess.getDatabaseConfigurationAccess().getGroup(), "rule__DatabaseConfiguration__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
			builder.put(grammarAccess.getIdentifierAccess().getGroup(), "rule__Identifier__Group__0");
			builder.put(grammarAccess.getDTOAccess().getGroup(), "rule__DTO__Group__0");
			builder.put(grammarAccess.getServiceAccess().getGroup(), "rule__Service__Group__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_2(), "rule__Service__Group_2__0");
			builder.put(grammarAccess.getControllerAccess().getGroup(), "rule__Controller__Group__0");
			builder.put(grammarAccess.getControllerAccess().getGroup_4(), "rule__Controller__Group_4__0");
			builder.put(grammarAccess.getControllerAccess().getGroup_5(), "rule__Controller__Group_5__0");
			builder.put(grammarAccess.getControllerAccess().getGroup_6(), "rule__Controller__Group_6__0");
			builder.put(grammarAccess.getServiceActionAccess().getGroup(), "rule__ServiceAction__Group__0");
			builder.put(grammarAccess.getServiceActionAccess().getGroup_5(), "rule__ServiceAction__Group_5__0");
			builder.put(grammarAccess.getServiceActionAccess().getGroup_6(), "rule__ServiceAction__Group_6__0");
			builder.put(grammarAccess.getCustomActionAccess().getGroup(), "rule__CustomAction__Group__0");
			builder.put(grammarAccess.getCustomActionAccess().getGroup_4(), "rule__CustomAction__Group_4__0");
			builder.put(grammarAccess.getActionParameterAccess().getGroup(), "rule__ActionParameter__Group__0");
			builder.put(grammarAccess.getActionParameterAccess().getGroup_3(), "rule__ActionParameter__Group_3__0");
			builder.put(grammarAccess.getRepositoryAccess().getGroup(), "rule__Repository__Group__0");
			builder.put(grammarAccess.getFindByMethodAccess().getGroup(), "rule__FindByMethod__Group__0");
			builder.put(grammarAccess.getDeleteByMethodAccess().getGroup(), "rule__DeleteByMethod__Group__0");
			builder.put(grammarAccess.getCustomQueryMethodAccess().getGroup(), "rule__CustomQueryMethod__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_3(), "rule__Property__Group_3__0");
			builder.put(grammarAccess.getListTypeAccess().getGroup(), "rule__ListType__Group__0");
			builder.put(grammarAccess.getSetTypeAccess().getGroup(), "rule__SetType__Group__0");
			builder.put(grammarAccess.getSpringBootProjectAccess().getNameAssignment_1(), "rule__SpringBootProject__NameAssignment_1");
			builder.put(grammarAccess.getSpringBootProjectAccess().getConfigurationAssignment_2(), "rule__SpringBootProject__ConfigurationAssignment_2");
			builder.put(grammarAccess.getSpringBootProjectAccess().getElementsAssignment_3(), "rule__SpringBootProject__ElementsAssignment_3");
			builder.put(grammarAccess.getEntityRelationshipAccess().getTypeAssignment_1(), "rule__EntityRelationship__TypeAssignment_1");
			builder.put(grammarAccess.getEntityRelationshipAccess().getSourceAssignment_3(), "rule__EntityRelationship__SourceAssignment_3");
			builder.put(grammarAccess.getEntityRelationshipAccess().getTargetAssignment_5(), "rule__EntityRelationship__TargetAssignment_5");
			builder.put(grammarAccess.getProjectConfigurationAccess().getServerAssignment_2(), "rule__ProjectConfiguration__ServerAssignment_2");
			builder.put(grammarAccess.getProjectConfigurationAccess().getDatabaseAssignment_3(), "rule__ProjectConfiguration__DatabaseAssignment_3");
			builder.put(grammarAccess.getServerConfigurationAccess().getPortAssignment_3(), "rule__ServerConfiguration__PortAssignment_3");
			builder.put(grammarAccess.getServerConfigurationAccess().getContextPathAssignment_4_1(), "rule__ServerConfiguration__ContextPathAssignment_4_1");
			builder.put(grammarAccess.getDatabaseConfigurationAccess().getTypeAssignment_3(), "rule__DatabaseConfiguration__TypeAssignment_3");
			builder.put(grammarAccess.getDatabaseConfigurationAccess().getNameAssignment_5(), "rule__DatabaseConfiguration__NameAssignment_5");
			builder.put(grammarAccess.getDatabaseConfigurationAccess().getPortAssignment_7(), "rule__DatabaseConfiguration__PortAssignment_7");
			builder.put(grammarAccess.getDatabaseConfigurationAccess().getUsernameAssignment_9(), "rule__DatabaseConfiguration__UsernameAssignment_9");
			builder.put(grammarAccess.getDatabaseConfigurationAccess().getPasswordAssignment_11(), "rule__DatabaseConfiguration__PasswordAssignment_11");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getExtendsAssignment_2_1(), "rule__Entity__ExtendsAssignment_2_1");
			builder.put(grammarAccess.getEntityAccess().getIdentifierAssignment_4(), "rule__Entity__IdentifierAssignment_4");
			builder.put(grammarAccess.getEntityAccess().getPropertiesAssignment_5(), "rule__Entity__PropertiesAssignment_5");
			builder.put(grammarAccess.getEntityAccess().getRepositoryAssignment_6(), "rule__Entity__RepositoryAssignment_6");
			builder.put(grammarAccess.getEntityAccess().getServicesAssignment_7(), "rule__Entity__ServicesAssignment_7");
			builder.put(grammarAccess.getEntityAccess().getControllerAssignment_8(), "rule__Entity__ControllerAssignment_8");
			builder.put(grammarAccess.getIdentifierAccess().getNameAssignment_1(), "rule__Identifier__NameAssignment_1");
			builder.put(grammarAccess.getIdentifierAccess().getTypeAssignment_2(), "rule__Identifier__TypeAssignment_2");
			builder.put(grammarAccess.getDTOAccess().getNameAssignment_1(), "rule__DTO__NameAssignment_1");
			builder.put(grammarAccess.getDTOAccess().getPropertiesAssignment_3(), "rule__DTO__PropertiesAssignment_3");
			builder.put(grammarAccess.getServiceAccess().getNameAssignment_1(), "rule__Service__NameAssignment_1");
			builder.put(grammarAccess.getServiceAccess().getEntityAssignment_2_1(), "rule__Service__EntityAssignment_2_1");
			builder.put(grammarAccess.getServiceAccess().getActionsAssignment_4(), "rule__Service__ActionsAssignment_4");
			builder.put(grammarAccess.getControllerAccess().getBaseUrlAssignment_2(), "rule__Controller__BaseUrlAssignment_2");
			builder.put(grammarAccess.getControllerAccess().getCustomActionsAssignment_3(), "rule__Controller__CustomActionsAssignment_3");
			builder.put(grammarAccess.getControllerAccess().getCreateParamAssignment_4_2(), "rule__Controller__CreateParamAssignment_4_2");
			builder.put(grammarAccess.getControllerAccess().getFindParamAssignment_5_2(), "rule__Controller__FindParamAssignment_5_2");
			builder.put(grammarAccess.getControllerAccess().getDeleteParamAssignment_6_2(), "rule__Controller__DeleteParamAssignment_6_2");
			builder.put(grammarAccess.getServiceActionAccess().getNameAssignment_1(), "rule__ServiceAction__NameAssignment_1");
			builder.put(grammarAccess.getServiceActionAccess().getReturnTypeAssignment_4(), "rule__ServiceAction__ReturnTypeAssignment_4");
			builder.put(grammarAccess.getServiceActionAccess().getExceptionTypeAssignment_5_1(), "rule__ServiceAction__ExceptionTypeAssignment_5_1");
			builder.put(grammarAccess.getServiceActionAccess().getImplementationAssignment_6_1(), "rule__ServiceAction__ImplementationAssignment_6_1");
			builder.put(grammarAccess.getServiceActionAccess().getParametersAssignment_9(), "rule__ServiceAction__ParametersAssignment_9");
			builder.put(grammarAccess.getCustomActionAccess().getMethodAssignment_0(), "rule__CustomAction__MethodAssignment_0");
			builder.put(grammarAccess.getCustomActionAccess().getNameAssignment_2(), "rule__CustomAction__NameAssignment_2");
			builder.put(grammarAccess.getCustomActionAccess().getUrlAssignment_4_1(), "rule__CustomAction__UrlAssignment_4_1");
			builder.put(grammarAccess.getCustomActionAccess().getParametersAssignment_5(), "rule__CustomAction__ParametersAssignment_5");
			builder.put(grammarAccess.getActionParameterAccess().getNameAssignment_0(), "rule__ActionParameter__NameAssignment_0");
			builder.put(grammarAccess.getActionParameterAccess().getTypeAssignment_2(), "rule__ActionParameter__TypeAssignment_2");
			builder.put(grammarAccess.getActionParameterAccess().getDefaultValueAssignment_3_1(), "rule__ActionParameter__DefaultValueAssignment_3_1");
			builder.put(grammarAccess.getRepositoryAccess().getFindByMethodsAssignment_2(), "rule__Repository__FindByMethodsAssignment_2");
			builder.put(grammarAccess.getRepositoryAccess().getDeleteByMethodsAssignment_3(), "rule__Repository__DeleteByMethodsAssignment_3");
			builder.put(grammarAccess.getRepositoryAccess().getCustomQueryMethodsAssignment_4(), "rule__Repository__CustomQueryMethodsAssignment_4");
			builder.put(grammarAccess.getFindByMethodAccess().getPropertyAssignment_2(), "rule__FindByMethod__PropertyAssignment_2");
			builder.put(grammarAccess.getFindByMethodAccess().getPtypeAssignment_4(), "rule__FindByMethod__PtypeAssignment_4");
			builder.put(grammarAccess.getDeleteByMethodAccess().getPropertyAssignment_2(), "rule__DeleteByMethod__PropertyAssignment_2");
			builder.put(grammarAccess.getDeleteByMethodAccess().getPtypeAssignment_4(), "rule__DeleteByMethod__PtypeAssignment_4");
			builder.put(grammarAccess.getCustomQueryMethodAccess().getQueryAssignment_2(), "rule__CustomQueryMethod__QueryAssignment_2");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_0(), "rule__Property__NameAssignment_0");
			builder.put(grammarAccess.getPropertyAccess().getTypeAssignment_2(), "rule__Property__TypeAssignment_2");
			builder.put(grammarAccess.getPropertyAccess().getDefaultValueAssignment_3_1(), "rule__Property__DefaultValueAssignment_3_1");
			builder.put(grammarAccess.getListTypeAccess().getTypeAssignment_1(), "rule__ListType__TypeAssignment_1");
			builder.put(grammarAccess.getSetTypeAccess().getTypeAssignment_1(), "rule__SetType__TypeAssignment_1");
			builder.put(grammarAccess.getValueTypesAccess().getFLOATAssignment_0(), "rule__ValueTypes__FLOATAssignment_0");
			builder.put(grammarAccess.getValueTypesAccess().getLONGAssignment_1(), "rule__ValueTypes__LONGAssignment_1");
			builder.put(grammarAccess.getValueTypesAccess().getINTEGERAssignment_2(), "rule__ValueTypes__INTEGERAssignment_2");
			builder.put(grammarAccess.getValueTypesAccess().getCHARAssignment_3(), "rule__ValueTypes__CHARAssignment_3");
			builder.put(grammarAccess.getValueTypesAccess().getBOOLEANAssignment_4(), "rule__ValueTypes__BOOLEANAssignment_4");
			builder.put(grammarAccess.getValueTypesAccess().getBYTEAssignment_5(), "rule__ValueTypes__BYTEAssignment_5");
			builder.put(grammarAccess.getValueTypesAccess().getSTRINGAssignment_6(), "rule__ValueTypes__STRINGAssignment_6");
			builder.put(grammarAccess.getHttpMethodsAccess().getGETAssignment_0(), "rule__HttpMethods__GETAssignment_0");
			builder.put(grammarAccess.getHttpMethodsAccess().getDELETEAssignment_1(), "rule__HttpMethods__DELETEAssignment_1");
			builder.put(grammarAccess.getHttpMethodsAccess().getPOSTAssignment_2(), "rule__HttpMethods__POSTAssignment_2");
			builder.put(grammarAccess.getHttpMethodsAccess().getPUTAssignment_3(), "rule__HttpMethods__PUTAssignment_3");
			builder.put(grammarAccess.getHttpMethodsAccess().getPATCHAssignment_4(), "rule__HttpMethods__PATCHAssignment_4");
			builder.put(grammarAccess.getRDBMSAccess().getMYSQLAssignment_0(), "rule__RDBMS__MYSQLAssignment_0");
			builder.put(grammarAccess.getRDBMSAccess().getPOSTGRESAssignment_1(), "rule__RDBMS__POSTGRESAssignment_1");
			builder.put(grammarAccess.getRDBMSAccess().getMARIADBAssignment_2(), "rule__RDBMS__MARIADBAssignment_2");
			builder.put(grammarAccess.getRDBMSAccess().getH2Assignment_3(), "rule__RDBMS__H2Assignment_3");
			builder.put(grammarAccess.getRDBMSAccess().getORACLEAssignment_4(), "rule__RDBMS__ORACLEAssignment_4");
			builder.put(grammarAccess.getDatabaseRelationsAccess().getM2MAssignment_0(), "rule__DatabaseRelations__M2MAssignment_0");
			builder.put(grammarAccess.getDatabaseRelationsAccess().getM2OAssignment_1(), "rule__DatabaseRelations__M2OAssignment_1");
			builder.put(grammarAccess.getDatabaseRelationsAccess().getO2MAssignment_2(), "rule__DatabaseRelations__O2MAssignment_2");
			builder.put(grammarAccess.getParamTransferAccess().getRequestBodyAssignment_0(), "rule__ParamTransfer__RequestBodyAssignment_0");
			builder.put(grammarAccess.getParamTransferAccess().getRequestParamAssignment_1(), "rule__ParamTransfer__RequestParamAssignment_1");
			builder.put(grammarAccess.getParamTransferAccess().getPathVariableAssignment_2(), "rule__ParamTransfer__PathVariableAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SpringGenGrammarAccess grammarAccess;

	@Override
	protected InternalSpringGenParser createParser() {
		InternalSpringGenParser result = new InternalSpringGenParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SpringGenGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SpringGenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
