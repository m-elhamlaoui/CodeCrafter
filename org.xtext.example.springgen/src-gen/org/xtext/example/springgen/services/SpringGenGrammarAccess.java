/*
 * generated by Xtext 2.37.0
 */
package org.xtext.example.springgen.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SpringGenGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SpringBootProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.SpringBootProject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConfigurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConfigurationProjectConfigurationParserRuleCall_2_0 = (RuleCall)cConfigurationAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsProjectElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//SpringBootProject:
		//    'project' name=ID
		//    configuration=ProjectConfiguration?
		//    elements+=ProjectElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//'project' name=ID
		//configuration=ProjectConfiguration?
		//elements+=ProjectElement*
		public Group getGroup() { return cGroup; }
		
		//'project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//configuration=ProjectConfiguration?
		public Assignment getConfigurationAssignment_2() { return cConfigurationAssignment_2; }
		
		//ProjectConfiguration
		public RuleCall getConfigurationProjectConfigurationParserRuleCall_2_0() { return cConfigurationProjectConfigurationParserRuleCall_2_0; }
		
		//elements+=ProjectElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//ProjectElement
		public RuleCall getElementsProjectElementParserRuleCall_3_0() { return cElementsProjectElementParserRuleCall_3_0; }
	}
	public class ProjectElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.ProjectElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityRelationshipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDTOParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cServiceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRepositoryParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cControllerParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ProjectElement:
		//    Entity | EntityRelationship | DTO | Service | Repository | Controller;
		@Override public ParserRule getRule() { return rule; }
		
		//Entity | EntityRelationship | DTO | Service | Repository | Controller
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }
		
		//EntityRelationship
		public RuleCall getEntityRelationshipParserRuleCall_1() { return cEntityRelationshipParserRuleCall_1; }
		
		//DTO
		public RuleCall getDTOParserRuleCall_2() { return cDTOParserRuleCall_2; }
		
		//Service
		public RuleCall getServiceParserRuleCall_3() { return cServiceParserRuleCall_3; }
		
		//Repository
		public RuleCall getRepositoryParserRuleCall_4() { return cRepositoryParserRuleCall_4; }
		
		//Controller
		public RuleCall getControllerParserRuleCall_5() { return cControllerParserRuleCall_5; }
	}
	public class EntityRelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.EntityRelationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDatabaseRelationsParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cBetweenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceEntityCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceEntityCrossReference_3_0.eContents().get(1);
		private final Keyword cAndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetEntityCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetEntityIDTerminalRuleCall_5_0_1 = (RuleCall)cTargetEntityCrossReference_5_0.eContents().get(1);
		
		//EntityRelationship:
		//    'relation' type=DatabaseRelations 'between' source=[Entity] 'and' target=[Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//'relation' type=DatabaseRelations 'between' source=[Entity] 'and' target=[Entity]
		public Group getGroup() { return cGroup; }
		
		//'relation'
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }
		
		//type=DatabaseRelations
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//DatabaseRelations
		public RuleCall getTypeDatabaseRelationsParserRuleCall_1_0() { return cTypeDatabaseRelationsParserRuleCall_1_0; }
		
		//'between'
		public Keyword getBetweenKeyword_2() { return cBetweenKeyword_2; }
		
		//source=[Entity]
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//[Entity]
		public CrossReference getSourceEntityCrossReference_3_0() { return cSourceEntityCrossReference_3_0; }
		
		//ID
		public RuleCall getSourceEntityIDTerminalRuleCall_3_0_1() { return cSourceEntityIDTerminalRuleCall_3_0_1; }
		
		//'and'
		public Keyword getAndKeyword_4() { return cAndKeyword_4; }
		
		//target=[Entity]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }
		
		//[Entity]
		public CrossReference getTargetEntityCrossReference_5_0() { return cTargetEntityCrossReference_5_0; }
		
		//ID
		public RuleCall getTargetEntityIDTerminalRuleCall_5_0_1() { return cTargetEntityIDTerminalRuleCall_5_0_1; }
	}
	public class ProjectConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.ProjectConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cServerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cServerServerConfigurationParserRuleCall_2_0 = (RuleCall)cServerAssignment_2.eContents().get(0);
		private final Assignment cDatabaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatabaseDatabaseConfigurationParserRuleCall_3_0 = (RuleCall)cDatabaseAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProjectConfiguration:
		//    'config' '{'
		//        server=ServerConfiguration?
		//        database=DatabaseConfiguration
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'config' '{'
		//    server=ServerConfiguration?
		//    database=DatabaseConfiguration
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'config'
		public Keyword getConfigKeyword_0() { return cConfigKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//server=ServerConfiguration?
		public Assignment getServerAssignment_2() { return cServerAssignment_2; }
		
		//ServerConfiguration
		public RuleCall getServerServerConfigurationParserRuleCall_2_0() { return cServerServerConfigurationParserRuleCall_2_0; }
		
		//database=DatabaseConfiguration
		public Assignment getDatabaseAssignment_3() { return cDatabaseAssignment_3; }
		
		//DatabaseConfiguration
		public RuleCall getDatabaseDatabaseConfigurationParserRuleCall_3_0() { return cDatabaseDatabaseConfigurationParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ServerConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.ServerConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPortKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortINTTerminalRuleCall_3_0 = (RuleCall)cPortAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cContextPathKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContextPathAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContextPathSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cContextPathAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ServerConfiguration:
		//    'server' '{'
		//        'port' port=INT
		//        ('contextPath' contextPath=STRING)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'server' '{'
		//    'port' port=INT
		//    ('contextPath' contextPath=STRING)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'server'
		public Keyword getServerKeyword_0() { return cServerKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'port'
		public Keyword getPortKeyword_2() { return cPortKeyword_2; }
		
		//port=INT
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_3_0() { return cPortINTTerminalRuleCall_3_0; }
		
		//('contextPath' contextPath=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'contextPath'
		public Keyword getContextPathKeyword_4_0() { return cContextPathKeyword_4_0; }
		
		//contextPath=STRING
		public Assignment getContextPathAssignment_4_1() { return cContextPathAssignment_4_1; }
		
		//STRING
		public RuleCall getContextPathSTRINGTerminalRuleCall_4_1_0() { return cContextPathSTRINGTerminalRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DatabaseConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.DatabaseConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatabaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDbmsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeRDBMSParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cNameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cPortKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPortAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPortINTTerminalRuleCall_7_0 = (RuleCall)cPortAssignment_7.eContents().get(0);
		private final Keyword cUsernameKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cUsernameAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cUsernameIDTerminalRuleCall_9_0 = (RuleCall)cUsernameAssignment_9.eContents().get(0);
		private final Keyword cPasswordKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cPasswordAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPasswordIDTerminalRuleCall_11_0 = (RuleCall)cPasswordAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//DatabaseConfiguration:
		//    'database' '{'
		//        'dbms' type=RDBMS
		//        'name' name=ID
		//        'port' port=INT
		//        'username' username=ID
		//        'password' password=ID
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'database' '{'
		//    'dbms' type=RDBMS
		//    'name' name=ID
		//    'port' port=INT
		//    'username' username=ID
		//    'password' password=ID
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'database'
		public Keyword getDatabaseKeyword_0() { return cDatabaseKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'dbms'
		public Keyword getDbmsKeyword_2() { return cDbmsKeyword_2; }
		
		//type=RDBMS
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//RDBMS
		public RuleCall getTypeRDBMSParserRuleCall_3_0() { return cTypeRDBMSParserRuleCall_3_0; }
		
		//'name'
		public Keyword getNameKeyword_4() { return cNameKeyword_4; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
		
		//'port'
		public Keyword getPortKeyword_6() { return cPortKeyword_6; }
		
		//port=INT
		public Assignment getPortAssignment_7() { return cPortAssignment_7; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_7_0() { return cPortINTTerminalRuleCall_7_0; }
		
		//'username'
		public Keyword getUsernameKeyword_8() { return cUsernameKeyword_8; }
		
		//username=ID
		public Assignment getUsernameAssignment_9() { return cUsernameAssignment_9; }
		
		//ID
		public RuleCall getUsernameIDTerminalRuleCall_9_0() { return cUsernameIDTerminalRuleCall_9_0; }
		
		//'password'
		public Keyword getPasswordKeyword_10() { return cPasswordKeyword_10; }
		
		//password=ID
		public Assignment getPasswordAssignment_11() { return cPasswordAssignment_11; }
		
		//ID
		public RuleCall getPasswordIDTerminalRuleCall_11_0() { return cPasswordIDTerminalRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInheritsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendsEntityCrossReference_2_1_0 = (CrossReference)cExtendsAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendsEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cExtendsEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdentifierAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdentifierIdentifierParserRuleCall_4_0 = (RuleCall)cIdentifierAssignment_4.eContents().get(0);
		private final Assignment cPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_0 = (RuleCall)cPropertiesAssignment_5.eContents().get(0);
		private final Assignment cRepositoryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRepositoryRepositoryParserRuleCall_6_0 = (RuleCall)cRepositoryAssignment_6.eContents().get(0);
		private final Assignment cServicesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cServicesServiceParserRuleCall_7_0 = (RuleCall)cServicesAssignment_7.eContents().get(0);
		private final Assignment cControllerAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cControllerControllerParserRuleCall_8_0 = (RuleCall)cControllerAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Entity:
		//    'entity' name=ID ('inherits' extends=[Entity])? '{'
		//        identifier=Identifier
		//        properties+=Property*
		//        repository=Repository?
		//        services+=Service*
		//        controller=Controller?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID ('inherits' extends=[Entity])? '{'
		//    identifier=Identifier
		//    properties+=Property*
		//    repository=Repository?
		//    services+=Service*
		//    controller=Controller?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('inherits' extends=[Entity])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'inherits'
		public Keyword getInheritsKeyword_2_0() { return cInheritsKeyword_2_0; }
		
		//extends=[Entity]
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }
		
		//[Entity]
		public CrossReference getExtendsEntityCrossReference_2_1_0() { return cExtendsEntityCrossReference_2_1_0; }
		
		//ID
		public RuleCall getExtendsEntityIDTerminalRuleCall_2_1_0_1() { return cExtendsEntityIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//identifier=Identifier
		public Assignment getIdentifierAssignment_4() { return cIdentifierAssignment_4; }
		
		//Identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_4_0() { return cIdentifierIdentifierParserRuleCall_4_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_5() { return cPropertiesAssignment_5; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_0() { return cPropertiesPropertyParserRuleCall_5_0; }
		
		//repository=Repository?
		public Assignment getRepositoryAssignment_6() { return cRepositoryAssignment_6; }
		
		//Repository
		public RuleCall getRepositoryRepositoryParserRuleCall_6_0() { return cRepositoryRepositoryParserRuleCall_6_0; }
		
		//services+=Service*
		public Assignment getServicesAssignment_7() { return cServicesAssignment_7; }
		
		//Service
		public RuleCall getServicesServiceParserRuleCall_7_0() { return cServicesServiceParserRuleCall_7_0; }
		
		//controller=Controller?
		public Assignment getControllerAssignment_8() { return cControllerAssignment_8; }
		
		//Controller
		public RuleCall getControllerControllerParserRuleCall_8_0() { return cControllerControllerParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.Identifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeValueTypesParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Identifier:
		//    'Id' name=ID type=ValueTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//'Id' name=ID type=ValueTypes
		public Group getGroup() { return cGroup; }
		
		//'Id'
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//type=ValueTypes
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ValueTypes
		public RuleCall getTypeValueTypesParserRuleCall_2_0() { return cTypeValueTypesParserRuleCall_2_0; }
	}
	public class DTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.DTO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDtoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DTO:
		//    'dto' name=ID '{'
		//        properties+=Property*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'dto' name=ID '{'
		//    properties+=Property*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'dto'
		public Keyword getDtoKeyword_0() { return cDtoKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPertainingToKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_2_1_0 = (CrossReference)cEntityAssignment_2_1.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cEntityEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionsServiceActionParserRuleCall_4_0 = (RuleCall)cActionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Service:
		//    'service' name=ID ('pertainingTo' entity=[Entity])? '{'
		//        actions+=ServiceAction*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'service' name=ID ('pertainingTo' entity=[Entity])? '{'
		//    actions+=ServiceAction*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('pertainingTo' entity=[Entity])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'pertainingTo'
		public Keyword getPertainingToKeyword_2_0() { return cPertainingToKeyword_2_0; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_2_1() { return cEntityAssignment_2_1; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_2_1_0() { return cEntityEntityCrossReference_2_1_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_2_1_0_1() { return cEntityEntityIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//actions+=ServiceAction*
		public Assignment getActionsAssignment_4() { return cActionsAssignment_4; }
		
		//ServiceAction
		public RuleCall getActionsServiceActionParserRuleCall_4_0() { return cActionsServiceActionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.Controller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControllerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBaseUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBaseUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cBaseUrlAssignment_2.eContents().get(0);
		private final Assignment cCustomActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCustomActionsCustomActionParserRuleCall_3_0 = (RuleCall)cCustomActionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCreateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEntityKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cCreateParamAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cCreateParamParamTransferParserRuleCall_4_2_0 = (RuleCall)cCreateParamAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFindKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cEntityKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cFindParamAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cFindParamParamTransferParserRuleCall_5_2_0 = (RuleCall)cFindParamAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDeleteKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cEntityKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cDeleteParamAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDeleteParamParamTransferParserRuleCall_6_2_0 = (RuleCall)cDeleteParamAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Controller:
		//    'controller' '{'
		//        baseUrl=STRING?
		//        customActions+=CustomAction*
		//        ('create' 'entity:' createParam=ParamTransfer)?
		//        ('find' 'entity:' findParam=ParamTransfer)?
		//        ('delete' 'entity:' deleteParam=ParamTransfer)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'controller' '{'
		//    baseUrl=STRING?
		//    customActions+=CustomAction*
		//    ('create' 'entity:' createParam=ParamTransfer)?
		//    ('find' 'entity:' findParam=ParamTransfer)?
		//    ('delete' 'entity:' deleteParam=ParamTransfer)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'controller'
		public Keyword getControllerKeyword_0() { return cControllerKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//baseUrl=STRING?
		public Assignment getBaseUrlAssignment_2() { return cBaseUrlAssignment_2; }
		
		//STRING
		public RuleCall getBaseUrlSTRINGTerminalRuleCall_2_0() { return cBaseUrlSTRINGTerminalRuleCall_2_0; }
		
		//customActions+=CustomAction*
		public Assignment getCustomActionsAssignment_3() { return cCustomActionsAssignment_3; }
		
		//CustomAction
		public RuleCall getCustomActionsCustomActionParserRuleCall_3_0() { return cCustomActionsCustomActionParserRuleCall_3_0; }
		
		//('create' 'entity:' createParam=ParamTransfer)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'create'
		public Keyword getCreateKeyword_4_0() { return cCreateKeyword_4_0; }
		
		//'entity:'
		public Keyword getEntityKeyword_4_1() { return cEntityKeyword_4_1; }
		
		//createParam=ParamTransfer
		public Assignment getCreateParamAssignment_4_2() { return cCreateParamAssignment_4_2; }
		
		//ParamTransfer
		public RuleCall getCreateParamParamTransferParserRuleCall_4_2_0() { return cCreateParamParamTransferParserRuleCall_4_2_0; }
		
		//('find' 'entity:' findParam=ParamTransfer)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'find'
		public Keyword getFindKeyword_5_0() { return cFindKeyword_5_0; }
		
		//'entity:'
		public Keyword getEntityKeyword_5_1() { return cEntityKeyword_5_1; }
		
		//findParam=ParamTransfer
		public Assignment getFindParamAssignment_5_2() { return cFindParamAssignment_5_2; }
		
		//ParamTransfer
		public RuleCall getFindParamParamTransferParserRuleCall_5_2_0() { return cFindParamParamTransferParserRuleCall_5_2_0; }
		
		//('delete' 'entity:' deleteParam=ParamTransfer)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'delete'
		public Keyword getDeleteKeyword_6_0() { return cDeleteKeyword_6_0; }
		
		//'entity:'
		public Keyword getEntityKeyword_6_1() { return cEntityKeyword_6_1; }
		
		//deleteParam=ParamTransfer
		public Assignment getDeleteParamAssignment_6_2() { return cDeleteParamAssignment_6_2; }
		
		//ParamTransfer
		public RuleCall getDeleteParamParamTransferParserRuleCall_6_2_0() { return cDeleteParamParamTransferParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ServiceActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.ServiceAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cReturnsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReturnTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReturnTypeReturnTypeParserRuleCall_4_0 = (RuleCall)cReturnTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRaisesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExceptionTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExceptionTypeTypeParserRuleCall_5_1_0 = (RuleCall)cExceptionTypeAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cImplementationKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cImplementationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cImplementationSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cImplementationAssignment_6_1.eContents().get(0);
		private final Keyword cParamsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cParametersAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cParametersActionParameterParserRuleCall_9_0 = (RuleCall)cParametersAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ServiceAction:
		//    'operation' name=ID '{'
		//        'returns' returnType=ReturnType
		//        ('raises' exceptionType=Type)?
		//        ('implementation' implementation=STRING)?
		//        'params' '(' parameters+=ActionParameter* ')'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'operation' name=ID '{'
		//    'returns' returnType=ReturnType
		//    ('raises' exceptionType=Type)?
		//    ('implementation' implementation=STRING)?
		//    'params' '(' parameters+=ActionParameter* ')'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'operation'
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'returns'
		public Keyword getReturnsKeyword_3() { return cReturnsKeyword_3; }
		
		//returnType=ReturnType
		public Assignment getReturnTypeAssignment_4() { return cReturnTypeAssignment_4; }
		
		//ReturnType
		public RuleCall getReturnTypeReturnTypeParserRuleCall_4_0() { return cReturnTypeReturnTypeParserRuleCall_4_0; }
		
		//('raises' exceptionType=Type)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'raises'
		public Keyword getRaisesKeyword_5_0() { return cRaisesKeyword_5_0; }
		
		//exceptionType=Type
		public Assignment getExceptionTypeAssignment_5_1() { return cExceptionTypeAssignment_5_1; }
		
		//Type
		public RuleCall getExceptionTypeTypeParserRuleCall_5_1_0() { return cExceptionTypeTypeParserRuleCall_5_1_0; }
		
		//('implementation' implementation=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'implementation'
		public Keyword getImplementationKeyword_6_0() { return cImplementationKeyword_6_0; }
		
		//implementation=STRING
		public Assignment getImplementationAssignment_6_1() { return cImplementationAssignment_6_1; }
		
		//STRING
		public RuleCall getImplementationSTRINGTerminalRuleCall_6_1_0() { return cImplementationSTRINGTerminalRuleCall_6_1_0; }
		
		//'params'
		public Keyword getParamsKeyword_7() { return cParamsKeyword_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//parameters+=ActionParameter*
		public Assignment getParametersAssignment_9() { return cParametersAssignment_9; }
		
		//ActionParameter
		public RuleCall getParametersActionParameterParserRuleCall_9_0() { return cParametersActionParameterParserRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class CustomActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.CustomAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMethodHttpMethodsParserRuleCall_0_0 = (RuleCall)cMethodAssignment_0.eContents().get(0);
		private final Keyword cActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMappedAtKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUrlAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cUrlAssignment_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersActionParameterParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CustomAction:
		//    method=HttpMethods 'action' name=ID '{'
		//        ('mappedAt' url=STRING)?
		//        parameters+=ActionParameter*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//method=HttpMethods 'action' name=ID '{'
		//    ('mappedAt' url=STRING)?
		//    parameters+=ActionParameter*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//method=HttpMethods
		public Assignment getMethodAssignment_0() { return cMethodAssignment_0; }
		
		//HttpMethods
		public RuleCall getMethodHttpMethodsParserRuleCall_0_0() { return cMethodHttpMethodsParserRuleCall_0_0; }
		
		//'action'
		public Keyword getActionKeyword_1() { return cActionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('mappedAt' url=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'mappedAt'
		public Keyword getMappedAtKeyword_4_0() { return cMappedAtKeyword_4_0; }
		
		//url=STRING
		public Assignment getUrlAssignment_4_1() { return cUrlAssignment_4_1; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_4_1_0() { return cUrlSTRINGTerminalRuleCall_4_1_0; }
		
		//parameters+=ActionParameter*
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }
		
		//ActionParameter
		public RuleCall getParametersActionParameterParserRuleCall_5_0() { return cParametersActionParameterParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ActionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.ActionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDefaultKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDefaultValueAssignment_3_1.eContents().get(0);
		
		//ActionParameter:
		//    name=ID ':' type=Type ('default' defaultValue=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type ('default' defaultValue=STRING)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//('default' defaultValue=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'default'
		public Keyword getDefaultKeyword_3_0() { return cDefaultKeyword_3_0; }
		
		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_3_1() { return cDefaultValueAssignment_3_1; }
		
		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_3_1_0() { return cDefaultValueSTRINGTerminalRuleCall_3_1_0; }
	}
	public class RepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.Repository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepositoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFindByMethodsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFindByMethodsFindByMethodParserRuleCall_2_0 = (RuleCall)cFindByMethodsAssignment_2.eContents().get(0);
		private final Assignment cDeleteByMethodsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeleteByMethodsDeleteByMethodParserRuleCall_3_0 = (RuleCall)cDeleteByMethodsAssignment_3.eContents().get(0);
		private final Assignment cCustomQueryMethodsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCustomQueryMethodsCustomQueryMethodParserRuleCall_4_0 = (RuleCall)cCustomQueryMethodsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Repository:
		//    'repository' '{'
		//        findByMethods+=FindByMethod*
		//        deleteByMethods+=DeleteByMethod*
		//        customQueryMethods+=CustomQueryMethod*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'repository' '{'
		//    findByMethods+=FindByMethod*
		//    deleteByMethods+=DeleteByMethod*
		//    customQueryMethods+=CustomQueryMethod*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'repository'
		public Keyword getRepositoryKeyword_0() { return cRepositoryKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//findByMethods+=FindByMethod*
		public Assignment getFindByMethodsAssignment_2() { return cFindByMethodsAssignment_2; }
		
		//FindByMethod
		public RuleCall getFindByMethodsFindByMethodParserRuleCall_2_0() { return cFindByMethodsFindByMethodParserRuleCall_2_0; }
		
		//deleteByMethods+=DeleteByMethod*
		public Assignment getDeleteByMethodsAssignment_3() { return cDeleteByMethodsAssignment_3; }
		
		//DeleteByMethod
		public RuleCall getDeleteByMethodsDeleteByMethodParserRuleCall_3_0() { return cDeleteByMethodsDeleteByMethodParserRuleCall_3_0; }
		
		//customQueryMethods+=CustomQueryMethod*
		public Assignment getCustomQueryMethodsAssignment_4() { return cCustomQueryMethodsAssignment_4; }
		
		//CustomQueryMethod
		public RuleCall getCustomQueryMethodsCustomQueryMethodParserRuleCall_4_0() { return cCustomQueryMethodsCustomQueryMethodParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FindByMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.FindByMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyIDTerminalRuleCall_2_0 = (RuleCall)cPropertyAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPtypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPtypeValueTypesParserRuleCall_4_0 = (RuleCall)cPtypeAssignment_4.eContents().get(0);
		
		//FindByMethod:
		//    'find' 'by' property=ID ':' ptype=ValueTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//'find' 'by' property=ID ':' ptype=ValueTypes
		public Group getGroup() { return cGroup; }
		
		//'find'
		public Keyword getFindKeyword_0() { return cFindKeyword_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//property=ID
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_2_0() { return cPropertyIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//ptype=ValueTypes
		public Assignment getPtypeAssignment_4() { return cPtypeAssignment_4; }
		
		//ValueTypes
		public RuleCall getPtypeValueTypesParserRuleCall_4_0() { return cPtypeValueTypesParserRuleCall_4_0; }
	}
	public class DeleteByMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.DeleteByMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyIDTerminalRuleCall_2_0 = (RuleCall)cPropertyAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPtypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPtypeValueTypesParserRuleCall_4_0 = (RuleCall)cPtypeAssignment_4.eContents().get(0);
		
		//DeleteByMethod:
		//    'delete' 'by' property=ID ':' ptype=ValueTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//'delete' 'by' property=ID ':' ptype=ValueTypes
		public Group getGroup() { return cGroup; }
		
		//'delete'
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//property=ID
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_2_0() { return cPropertyIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//ptype=ValueTypes
		public Assignment getPtypeAssignment_4() { return cPtypeAssignment_4; }
		
		//ValueTypes
		public RuleCall getPtypeValueTypesParserRuleCall_4_0() { return cPtypeValueTypesParserRuleCall_4_0; }
	}
	public class CustomQueryMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.CustomQueryMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCustomQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQueryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuerySTRINGTerminalRuleCall_2_0 = (RuleCall)cQueryAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CustomQueryMethod:
		//    'customQuery' '{' query=STRING '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'customQuery' '{' query=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'customQuery'
		public Keyword getCustomQueryKeyword_0() { return cCustomQueryKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//query=STRING
		public Assignment getQueryAssignment_2() { return cQueryAssignment_2; }
		
		//STRING
		public RuleCall getQuerySTRINGTerminalRuleCall_2_0() { return cQuerySTRINGTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDefaultKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDefaultValueAssignment_3_1.eContents().get(0);
		
		//Property:
		//    name=ID ':' type=Type ('default' defaultValue=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type ('default' defaultValue=STRING)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//('default' defaultValue=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'default'
		public Keyword getDefaultKeyword_3_0() { return cDefaultKeyword_3_0; }
		
		//defaultValue=STRING
		public Assignment getDefaultValueAssignment_3_1() { return cDefaultValueAssignment_3_1; }
		
		//STRING
		public RuleCall getDefaultValueSTRINGTerminalRuleCall_3_1_0() { return cDefaultValueSTRINGTerminalRuleCall_3_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueTypesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//    ValueTypes | ListType | SetType;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueTypes | ListType | SetType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueTypes
		public RuleCall getValueTypesParserRuleCall_0() { return cValueTypesParserRuleCall_0; }
		
		//ListType
		public RuleCall getListTypeParserRuleCall_1() { return cListTypeParserRuleCall_1; }
		
		//SetType
		public RuleCall getSetTypeParserRuleCall_2() { return cSetTypeParserRuleCall_2; }
	}
	public class ReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.ReturnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueTypesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ReturnType:
		//    ValueTypes | ListType | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueTypes | ListType | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueTypes
		public RuleCall getValueTypesParserRuleCall_0() { return cValueTypesParserRuleCall_0; }
		
		//ListType
		public RuleCall getListTypeParserRuleCall_1() { return cListTypeParserRuleCall_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class ListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.ListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ListType:
		//    'List<' type=Type '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'List<' type=Type '>'
		public Group getGroup() { return cGroup; }
		
		//'List<'
		public Keyword getListKeyword_0() { return cListKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class SetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.SetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SetType:
		//    'Set<' type=Type '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'Set<' type=Type '>'
		public Group getGroup() { return cGroup; }
		
		//'Set<'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class ValueTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.ValueTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFLOATAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cFLOATFloatKeyword_0_0 = (Keyword)cFLOATAssignment_0.eContents().get(0);
		private final Assignment cLONGAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cLONGLongKeyword_1_0 = (Keyword)cLONGAssignment_1.eContents().get(0);
		private final Assignment cINTEGERAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cINTEGERIntKeyword_2_0 = (Keyword)cINTEGERAssignment_2.eContents().get(0);
		private final Assignment cCHARAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cCHARCharKeyword_3_0 = (Keyword)cCHARAssignment_3.eContents().get(0);
		private final Assignment cBOOLEANAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cBOOLEANBooleanKeyword_4_0 = (Keyword)cBOOLEANAssignment_4.eContents().get(0);
		private final Assignment cBYTEAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cBYTEByteKeyword_5_0 = (Keyword)cBYTEAssignment_5.eContents().get(0);
		private final Assignment cSTRINGAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cSTRINGStringKeyword_6_0 = (Keyword)cSTRINGAssignment_6.eContents().get(0);
		
		//ValueTypes:
		//    FLOAT='float' | LONG='long' | INTEGER='int' | CHAR='char' | BOOLEAN='boolean' | BYTE='byte' | STRING='String';
		@Override public ParserRule getRule() { return rule; }
		
		//FLOAT='float' | LONG='long' | INTEGER='int' | CHAR='char' | BOOLEAN='boolean' | BYTE='byte' | STRING='String'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FLOAT='float'
		public Assignment getFLOATAssignment_0() { return cFLOATAssignment_0; }
		
		//'float'
		public Keyword getFLOATFloatKeyword_0_0() { return cFLOATFloatKeyword_0_0; }
		
		//LONG='long'
		public Assignment getLONGAssignment_1() { return cLONGAssignment_1; }
		
		//'long'
		public Keyword getLONGLongKeyword_1_0() { return cLONGLongKeyword_1_0; }
		
		//INTEGER='int'
		public Assignment getINTEGERAssignment_2() { return cINTEGERAssignment_2; }
		
		//'int'
		public Keyword getINTEGERIntKeyword_2_0() { return cINTEGERIntKeyword_2_0; }
		
		//CHAR='char'
		public Assignment getCHARAssignment_3() { return cCHARAssignment_3; }
		
		//'char'
		public Keyword getCHARCharKeyword_3_0() { return cCHARCharKeyword_3_0; }
		
		//BOOLEAN='boolean'
		public Assignment getBOOLEANAssignment_4() { return cBOOLEANAssignment_4; }
		
		//'boolean'
		public Keyword getBOOLEANBooleanKeyword_4_0() { return cBOOLEANBooleanKeyword_4_0; }
		
		//BYTE='byte'
		public Assignment getBYTEAssignment_5() { return cBYTEAssignment_5; }
		
		//'byte'
		public Keyword getBYTEByteKeyword_5_0() { return cBYTEByteKeyword_5_0; }
		
		//STRING='String'
		public Assignment getSTRINGAssignment_6() { return cSTRINGAssignment_6; }
		
		//'String'
		public Keyword getSTRINGStringKeyword_6_0() { return cSTRINGStringKeyword_6_0; }
	}
	public class HttpMethodsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.HttpMethods");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGETAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cGETGETKeyword_0_0 = (Keyword)cGETAssignment_0.eContents().get(0);
		private final Assignment cDELETEAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDELETEDELETEKeyword_1_0 = (Keyword)cDELETEAssignment_1.eContents().get(0);
		private final Assignment cPOSTAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cPOSTPOSTKeyword_2_0 = (Keyword)cPOSTAssignment_2.eContents().get(0);
		private final Assignment cPUTAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cPUTPUTKeyword_3_0 = (Keyword)cPUTAssignment_3.eContents().get(0);
		private final Assignment cPATCHAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cPATCHPATCHKeyword_4_0 = (Keyword)cPATCHAssignment_4.eContents().get(0);
		
		//HttpMethods:
		//    GET="GET" | DELETE="DELETE" | POST="POST" | PUT="PUT" | PATCH="PATCH";
		@Override public ParserRule getRule() { return rule; }
		
		//GET="GET" | DELETE="DELETE" | POST="POST" | PUT="PUT" | PATCH="PATCH"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GET="GET"
		public Assignment getGETAssignment_0() { return cGETAssignment_0; }
		
		//"GET"
		public Keyword getGETGETKeyword_0_0() { return cGETGETKeyword_0_0; }
		
		//DELETE="DELETE"
		public Assignment getDELETEAssignment_1() { return cDELETEAssignment_1; }
		
		//"DELETE"
		public Keyword getDELETEDELETEKeyword_1_0() { return cDELETEDELETEKeyword_1_0; }
		
		//POST="POST"
		public Assignment getPOSTAssignment_2() { return cPOSTAssignment_2; }
		
		//"POST"
		public Keyword getPOSTPOSTKeyword_2_0() { return cPOSTPOSTKeyword_2_0; }
		
		//PUT="PUT"
		public Assignment getPUTAssignment_3() { return cPUTAssignment_3; }
		
		//"PUT"
		public Keyword getPUTPUTKeyword_3_0() { return cPUTPUTKeyword_3_0; }
		
		//PATCH="PATCH"
		public Assignment getPATCHAssignment_4() { return cPATCHAssignment_4; }
		
		//"PATCH"
		public Keyword getPATCHPATCHKeyword_4_0() { return cPATCHPATCHKeyword_4_0; }
	}
	public class RDBMSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.RDBMS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMYSQLAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cMYSQLMySQLKeyword_0_0 = (Keyword)cMYSQLAssignment_0.eContents().get(0);
		private final Assignment cPOSTGRESAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cPOSTGRESPostgresKeyword_1_0 = (Keyword)cPOSTGRESAssignment_1.eContents().get(0);
		private final Assignment cMARIADBAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cMARIADBMariaDBKeyword_2_0 = (Keyword)cMARIADBAssignment_2.eContents().get(0);
		private final Assignment cH2Assignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cH2H2Keyword_3_0 = (Keyword)cH2Assignment_3.eContents().get(0);
		private final Assignment cORACLEAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cORACLEOracleKeyword_4_0 = (Keyword)cORACLEAssignment_4.eContents().get(0);
		
		//RDBMS:
		//    MYSQL="MySQL" | POSTGRES="Postgres" | MARIADB="MariaDB" | H2="H2" | ORACLE="Oracle";
		@Override public ParserRule getRule() { return rule; }
		
		//MYSQL="MySQL" | POSTGRES="Postgres" | MARIADB="MariaDB" | H2="H2" | ORACLE="Oracle"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MYSQL="MySQL"
		public Assignment getMYSQLAssignment_0() { return cMYSQLAssignment_0; }
		
		//"MySQL"
		public Keyword getMYSQLMySQLKeyword_0_0() { return cMYSQLMySQLKeyword_0_0; }
		
		//POSTGRES="Postgres"
		public Assignment getPOSTGRESAssignment_1() { return cPOSTGRESAssignment_1; }
		
		//"Postgres"
		public Keyword getPOSTGRESPostgresKeyword_1_0() { return cPOSTGRESPostgresKeyword_1_0; }
		
		//MARIADB="MariaDB"
		public Assignment getMARIADBAssignment_2() { return cMARIADBAssignment_2; }
		
		//"MariaDB"
		public Keyword getMARIADBMariaDBKeyword_2_0() { return cMARIADBMariaDBKeyword_2_0; }
		
		//H2="H2"
		public Assignment getH2Assignment_3() { return cH2Assignment_3; }
		
		//"H2"
		public Keyword getH2H2Keyword_3_0() { return cH2H2Keyword_3_0; }
		
		//ORACLE="Oracle"
		public Assignment getORACLEAssignment_4() { return cORACLEAssignment_4; }
		
		//"Oracle"
		public Keyword getORACLEOracleKeyword_4_0() { return cORACLEOracleKeyword_4_0; }
	}
	public class DatabaseRelationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.DatabaseRelations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cM2MAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cM2MManyToManyKeyword_0_0 = (Keyword)cM2MAssignment_0.eContents().get(0);
		private final Assignment cM2OAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cM2OManyToOneKeyword_1_0 = (Keyword)cM2OAssignment_1.eContents().get(0);
		private final Assignment cO2MAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cO2MOneToManyKeyword_2_0 = (Keyword)cO2MAssignment_2.eContents().get(0);
		
		//DatabaseRelations:
		//    M2M="ManyToMany" | M2O="ManyToOne" | O2M="OneToMany";
		@Override public ParserRule getRule() { return rule; }
		
		//M2M="ManyToMany" | M2O="ManyToOne" | O2M="OneToMany"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//M2M="ManyToMany"
		public Assignment getM2MAssignment_0() { return cM2MAssignment_0; }
		
		//"ManyToMany"
		public Keyword getM2MManyToManyKeyword_0_0() { return cM2MManyToManyKeyword_0_0; }
		
		//M2O="ManyToOne"
		public Assignment getM2OAssignment_1() { return cM2OAssignment_1; }
		
		//"ManyToOne"
		public Keyword getM2OManyToOneKeyword_1_0() { return cM2OManyToOneKeyword_1_0; }
		
		//O2M="OneToMany"
		public Assignment getO2MAssignment_2() { return cO2MAssignment_2; }
		
		//"OneToMany"
		public Keyword getO2MOneToManyKeyword_2_0() { return cO2MOneToManyKeyword_2_0; }
	}
	public class ParamTransferElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.springgen.SpringGen.ParamTransfer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRequestBodyAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cRequestBodyRequestBodyKeyword_0_0 = (Keyword)cRequestBodyAssignment_0.eContents().get(0);
		private final Assignment cRequestParamAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cRequestParamRequestParamKeyword_1_0 = (Keyword)cRequestParamAssignment_1.eContents().get(0);
		private final Assignment cPathVariableAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cPathVariablePathVariableKeyword_2_0 = (Keyword)cPathVariableAssignment_2.eContents().get(0);
		
		//ParamTransfer:
		//    RequestBody="RequestBody" | RequestParam="RequestParam" | PathVariable="PathVariable";
		@Override public ParserRule getRule() { return rule; }
		
		//RequestBody="RequestBody" | RequestParam="RequestParam" | PathVariable="PathVariable"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RequestBody="RequestBody"
		public Assignment getRequestBodyAssignment_0() { return cRequestBodyAssignment_0; }
		
		//"RequestBody"
		public Keyword getRequestBodyRequestBodyKeyword_0_0() { return cRequestBodyRequestBodyKeyword_0_0; }
		
		//RequestParam="RequestParam"
		public Assignment getRequestParamAssignment_1() { return cRequestParamAssignment_1; }
		
		//"RequestParam"
		public Keyword getRequestParamRequestParamKeyword_1_0() { return cRequestParamRequestParamKeyword_1_0; }
		
		//PathVariable="PathVariable"
		public Assignment getPathVariableAssignment_2() { return cPathVariableAssignment_2; }
		
		//"PathVariable"
		public Keyword getPathVariablePathVariableKeyword_2_0() { return cPathVariablePathVariableKeyword_2_0; }
	}
	
	
	private final SpringBootProjectElements pSpringBootProject;
	private final ProjectElementElements pProjectElement;
	private final EntityRelationshipElements pEntityRelationship;
	private final ProjectConfigurationElements pProjectConfiguration;
	private final ServerConfigurationElements pServerConfiguration;
	private final DatabaseConfigurationElements pDatabaseConfiguration;
	private final EntityElements pEntity;
	private final IdentifierElements pIdentifier;
	private final DTOElements pDTO;
	private final ServiceElements pService;
	private final ControllerElements pController;
	private final ServiceActionElements pServiceAction;
	private final CustomActionElements pCustomAction;
	private final ActionParameterElements pActionParameter;
	private final RepositoryElements pRepository;
	private final FindByMethodElements pFindByMethod;
	private final DeleteByMethodElements pDeleteByMethod;
	private final CustomQueryMethodElements pCustomQueryMethod;
	private final PropertyElements pProperty;
	private final TypeElements pType;
	private final ReturnTypeElements pReturnType;
	private final ListTypeElements pListType;
	private final SetTypeElements pSetType;
	private final ValueTypesElements pValueTypes;
	private final HttpMethodsElements pHttpMethods;
	private final RDBMSElements pRDBMS;
	private final DatabaseRelationsElements pDatabaseRelations;
	private final ParamTransferElements pParamTransfer;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpringGenGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSpringBootProject = new SpringBootProjectElements();
		this.pProjectElement = new ProjectElementElements();
		this.pEntityRelationship = new EntityRelationshipElements();
		this.pProjectConfiguration = new ProjectConfigurationElements();
		this.pServerConfiguration = new ServerConfigurationElements();
		this.pDatabaseConfiguration = new DatabaseConfigurationElements();
		this.pEntity = new EntityElements();
		this.pIdentifier = new IdentifierElements();
		this.pDTO = new DTOElements();
		this.pService = new ServiceElements();
		this.pController = new ControllerElements();
		this.pServiceAction = new ServiceActionElements();
		this.pCustomAction = new CustomActionElements();
		this.pActionParameter = new ActionParameterElements();
		this.pRepository = new RepositoryElements();
		this.pFindByMethod = new FindByMethodElements();
		this.pDeleteByMethod = new DeleteByMethodElements();
		this.pCustomQueryMethod = new CustomQueryMethodElements();
		this.pProperty = new PropertyElements();
		this.pType = new TypeElements();
		this.pReturnType = new ReturnTypeElements();
		this.pListType = new ListTypeElements();
		this.pSetType = new SetTypeElements();
		this.pValueTypes = new ValueTypesElements();
		this.pHttpMethods = new HttpMethodsElements();
		this.pRDBMS = new RDBMSElements();
		this.pDatabaseRelations = new DatabaseRelationsElements();
		this.pParamTransfer = new ParamTransferElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.springgen.SpringGen".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SpringBootProject:
	//    'project' name=ID
	//    configuration=ProjectConfiguration?
	//    elements+=ProjectElement*;
	public SpringBootProjectElements getSpringBootProjectAccess() {
		return pSpringBootProject;
	}
	
	public ParserRule getSpringBootProjectRule() {
		return getSpringBootProjectAccess().getRule();
	}
	
	//ProjectElement:
	//    Entity | EntityRelationship | DTO | Service | Repository | Controller;
	public ProjectElementElements getProjectElementAccess() {
		return pProjectElement;
	}
	
	public ParserRule getProjectElementRule() {
		return getProjectElementAccess().getRule();
	}
	
	//EntityRelationship:
	//    'relation' type=DatabaseRelations 'between' source=[Entity] 'and' target=[Entity];
	public EntityRelationshipElements getEntityRelationshipAccess() {
		return pEntityRelationship;
	}
	
	public ParserRule getEntityRelationshipRule() {
		return getEntityRelationshipAccess().getRule();
	}
	
	//ProjectConfiguration:
	//    'config' '{'
	//        server=ServerConfiguration?
	//        database=DatabaseConfiguration
	//    '}';
	public ProjectConfigurationElements getProjectConfigurationAccess() {
		return pProjectConfiguration;
	}
	
	public ParserRule getProjectConfigurationRule() {
		return getProjectConfigurationAccess().getRule();
	}
	
	//ServerConfiguration:
	//    'server' '{'
	//        'port' port=INT
	//        ('contextPath' contextPath=STRING)?
	//    '}';
	public ServerConfigurationElements getServerConfigurationAccess() {
		return pServerConfiguration;
	}
	
	public ParserRule getServerConfigurationRule() {
		return getServerConfigurationAccess().getRule();
	}
	
	//DatabaseConfiguration:
	//    'database' '{'
	//        'dbms' type=RDBMS
	//        'name' name=ID
	//        'port' port=INT
	//        'username' username=ID
	//        'password' password=ID
	//    '}';
	public DatabaseConfigurationElements getDatabaseConfigurationAccess() {
		return pDatabaseConfiguration;
	}
	
	public ParserRule getDatabaseConfigurationRule() {
		return getDatabaseConfigurationAccess().getRule();
	}
	
	//Entity:
	//    'entity' name=ID ('inherits' extends=[Entity])? '{'
	//        identifier=Identifier
	//        properties+=Property*
	//        repository=Repository?
	//        services+=Service*
	//        controller=Controller?
	//    '}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Identifier:
	//    'Id' name=ID type=ValueTypes;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//DTO:
	//    'dto' name=ID '{'
	//        properties+=Property*
	//    '}';
	public DTOElements getDTOAccess() {
		return pDTO;
	}
	
	public ParserRule getDTORule() {
		return getDTOAccess().getRule();
	}
	
	//Service:
	//    'service' name=ID ('pertainingTo' entity=[Entity])? '{'
	//        actions+=ServiceAction*
	//    '}';
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//Controller:
	//    'controller' '{'
	//        baseUrl=STRING?
	//        customActions+=CustomAction*
	//        ('create' 'entity:' createParam=ParamTransfer)?
	//        ('find' 'entity:' findParam=ParamTransfer)?
	//        ('delete' 'entity:' deleteParam=ParamTransfer)?
	//    '}';
	public ControllerElements getControllerAccess() {
		return pController;
	}
	
	public ParserRule getControllerRule() {
		return getControllerAccess().getRule();
	}
	
	//ServiceAction:
	//    'operation' name=ID '{'
	//        'returns' returnType=ReturnType
	//        ('raises' exceptionType=Type)?
	//        ('implementation' implementation=STRING)?
	//        'params' '(' parameters+=ActionParameter* ')'
	//    '}';
	public ServiceActionElements getServiceActionAccess() {
		return pServiceAction;
	}
	
	public ParserRule getServiceActionRule() {
		return getServiceActionAccess().getRule();
	}
	
	//CustomAction:
	//    method=HttpMethods 'action' name=ID '{'
	//        ('mappedAt' url=STRING)?
	//        parameters+=ActionParameter*
	//    '}';
	public CustomActionElements getCustomActionAccess() {
		return pCustomAction;
	}
	
	public ParserRule getCustomActionRule() {
		return getCustomActionAccess().getRule();
	}
	
	//ActionParameter:
	//    name=ID ':' type=Type ('default' defaultValue=STRING)?;
	public ActionParameterElements getActionParameterAccess() {
		return pActionParameter;
	}
	
	public ParserRule getActionParameterRule() {
		return getActionParameterAccess().getRule();
	}
	
	//Repository:
	//    'repository' '{'
	//        findByMethods+=FindByMethod*
	//        deleteByMethods+=DeleteByMethod*
	//        customQueryMethods+=CustomQueryMethod*
	//    '}';
	public RepositoryElements getRepositoryAccess() {
		return pRepository;
	}
	
	public ParserRule getRepositoryRule() {
		return getRepositoryAccess().getRule();
	}
	
	//FindByMethod:
	//    'find' 'by' property=ID ':' ptype=ValueTypes;
	public FindByMethodElements getFindByMethodAccess() {
		return pFindByMethod;
	}
	
	public ParserRule getFindByMethodRule() {
		return getFindByMethodAccess().getRule();
	}
	
	//DeleteByMethod:
	//    'delete' 'by' property=ID ':' ptype=ValueTypes;
	public DeleteByMethodElements getDeleteByMethodAccess() {
		return pDeleteByMethod;
	}
	
	public ParserRule getDeleteByMethodRule() {
		return getDeleteByMethodAccess().getRule();
	}
	
	//CustomQueryMethod:
	//    'customQuery' '{' query=STRING '}';
	public CustomQueryMethodElements getCustomQueryMethodAccess() {
		return pCustomQueryMethod;
	}
	
	public ParserRule getCustomQueryMethodRule() {
		return getCustomQueryMethodAccess().getRule();
	}
	
	//Property:
	//    name=ID ':' type=Type ('default' defaultValue=STRING)?;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Type:
	//    ValueTypes | ListType | SetType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//ReturnType:
	//    ValueTypes | ListType | ID;
	public ReturnTypeElements getReturnTypeAccess() {
		return pReturnType;
	}
	
	public ParserRule getReturnTypeRule() {
		return getReturnTypeAccess().getRule();
	}
	
	//ListType:
	//    'List<' type=Type '>';
	public ListTypeElements getListTypeAccess() {
		return pListType;
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}
	
	//SetType:
	//    'Set<' type=Type '>';
	public SetTypeElements getSetTypeAccess() {
		return pSetType;
	}
	
	public ParserRule getSetTypeRule() {
		return getSetTypeAccess().getRule();
	}
	
	//ValueTypes:
	//    FLOAT='float' | LONG='long' | INTEGER='int' | CHAR='char' | BOOLEAN='boolean' | BYTE='byte' | STRING='String';
	public ValueTypesElements getValueTypesAccess() {
		return pValueTypes;
	}
	
	public ParserRule getValueTypesRule() {
		return getValueTypesAccess().getRule();
	}
	
	//HttpMethods:
	//    GET="GET" | DELETE="DELETE" | POST="POST" | PUT="PUT" | PATCH="PATCH";
	public HttpMethodsElements getHttpMethodsAccess() {
		return pHttpMethods;
	}
	
	public ParserRule getHttpMethodsRule() {
		return getHttpMethodsAccess().getRule();
	}
	
	//RDBMS:
	//    MYSQL="MySQL" | POSTGRES="Postgres" | MARIADB="MariaDB" | H2="H2" | ORACLE="Oracle";
	public RDBMSElements getRDBMSAccess() {
		return pRDBMS;
	}
	
	public ParserRule getRDBMSRule() {
		return getRDBMSAccess().getRule();
	}
	
	//DatabaseRelations:
	//    M2M="ManyToMany" | M2O="ManyToOne" | O2M="OneToMany";
	public DatabaseRelationsElements getDatabaseRelationsAccess() {
		return pDatabaseRelations;
	}
	
	public ParserRule getDatabaseRelationsRule() {
		return getDatabaseRelationsAccess().getRule();
	}
	
	//ParamTransfer:
	//    RequestBody="RequestBody" | RequestParam="RequestParam" | PathVariable="PathVariable";
	public ParamTransferElements getParamTransferAccess() {
		return pParamTransfer;
	}
	
	public ParserRule getParamTransferRule() {
		return getParamTransferAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
