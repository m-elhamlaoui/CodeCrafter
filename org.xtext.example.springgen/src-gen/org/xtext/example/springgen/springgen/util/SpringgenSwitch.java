/**
 * generated by Xtext 2.37.0
 */
package org.xtext.example.springgen.springgen.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.springgen.springgen.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.springgen.springgen.SpringgenPackage
 * @generated
 */
public class SpringgenSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SpringgenPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpringgenSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SpringgenPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SpringgenPackage.SPRING_BOOT_PROJECT:
      {
        SpringBootProject springBootProject = (SpringBootProject)theEObject;
        T result = caseSpringBootProject(springBootProject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.PROJECT_ELEMENT:
      {
        ProjectElement projectElement = (ProjectElement)theEObject;
        T result = caseProjectElement(projectElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.ENTITY_RELATIONSHIP:
      {
        EntityRelationship entityRelationship = (EntityRelationship)theEObject;
        T result = caseEntityRelationship(entityRelationship);
        if (result == null) result = caseProjectElement(entityRelationship);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.PROJECT_CONFIGURATION:
      {
        ProjectConfiguration projectConfiguration = (ProjectConfiguration)theEObject;
        T result = caseProjectConfiguration(projectConfiguration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.SERVER_CONFIGURATION:
      {
        ServerConfiguration serverConfiguration = (ServerConfiguration)theEObject;
        T result = caseServerConfiguration(serverConfiguration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.DATABASE_CONFIGURATION:
      {
        DatabaseConfiguration databaseConfiguration = (DatabaseConfiguration)theEObject;
        T result = caseDatabaseConfiguration(databaseConfiguration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.ENTITY:
      {
        Entity entity = (Entity)theEObject;
        T result = caseEntity(entity);
        if (result == null) result = caseProjectElement(entity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.IDENTIFIER:
      {
        Identifier identifier = (Identifier)theEObject;
        T result = caseIdentifier(identifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.DTO:
      {
        DTO dto = (DTO)theEObject;
        T result = caseDTO(dto);
        if (result == null) result = caseProjectElement(dto);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.SERVICE:
      {
        Service service = (Service)theEObject;
        T result = caseService(service);
        if (result == null) result = caseProjectElement(service);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.CONTROLLER:
      {
        Controller controller = (Controller)theEObject;
        T result = caseController(controller);
        if (result == null) result = caseProjectElement(controller);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.SERVICE_ACTION:
      {
        ServiceAction serviceAction = (ServiceAction)theEObject;
        T result = caseServiceAction(serviceAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.CUSTOM_ACTION:
      {
        CustomAction customAction = (CustomAction)theEObject;
        T result = caseCustomAction(customAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.ACTION_PARAMETER:
      {
        ActionParameter actionParameter = (ActionParameter)theEObject;
        T result = caseActionParameter(actionParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.REPOSITORY:
      {
        Repository repository = (Repository)theEObject;
        T result = caseRepository(repository);
        if (result == null) result = caseProjectElement(repository);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.FIND_BY_METHOD:
      {
        FindByMethod findByMethod = (FindByMethod)theEObject;
        T result = caseFindByMethod(findByMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.DELETE_BY_METHOD:
      {
        DeleteByMethod deleteByMethod = (DeleteByMethod)theEObject;
        T result = caseDeleteByMethod(deleteByMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.CUSTOM_QUERY_METHOD:
      {
        CustomQueryMethod customQueryMethod = (CustomQueryMethod)theEObject;
        T result = caseCustomQueryMethod(customQueryMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.PROPERTY:
      {
        Property property = (Property)theEObject;
        T result = caseProperty(property);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.RETURN_TYPE:
      {
        ReturnType returnType = (ReturnType)theEObject;
        T result = caseReturnType(returnType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.LIST_TYPE:
      {
        ListType listType = (ListType)theEObject;
        T result = caseListType(listType);
        if (result == null) result = caseType(listType);
        if (result == null) result = caseReturnType(listType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.SET_TYPE:
      {
        SetType setType = (SetType)theEObject;
        T result = caseSetType(setType);
        if (result == null) result = caseType(setType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.VALUE_TYPES:
      {
        ValueTypes valueTypes = (ValueTypes)theEObject;
        T result = caseValueTypes(valueTypes);
        if (result == null) result = caseType(valueTypes);
        if (result == null) result = caseReturnType(valueTypes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.HTTP_METHODS:
      {
        HttpMethods httpMethods = (HttpMethods)theEObject;
        T result = caseHttpMethods(httpMethods);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.RDBMS:
      {
        RDBMS rdbms = (RDBMS)theEObject;
        T result = caseRDBMS(rdbms);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.DATABASE_RELATIONS:
      {
        DatabaseRelations databaseRelations = (DatabaseRelations)theEObject;
        T result = caseDatabaseRelations(databaseRelations);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.PARAM_TRANSFER:
      {
        ParamTransfer paramTransfer = (ParamTransfer)theEObject;
        T result = caseParamTransfer(paramTransfer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.DOCKERFILE:
      {
        Dockerfile dockerfile = (Dockerfile)theEObject;
        T result = caseDockerfile(dockerfile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.BASE_IMAGE:
      {
        BaseImage baseImage = (BaseImage)theEObject;
        T result = caseBaseImage(baseImage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.DOCKER_INSTRUCTION:
      {
        DockerInstruction dockerInstruction = (DockerInstruction)theEObject;
        T result = caseDockerInstruction(dockerInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.RUN_INSTRUCTION:
      {
        RunInstruction runInstruction = (RunInstruction)theEObject;
        T result = caseRunInstruction(runInstruction);
        if (result == null) result = caseDockerInstruction(runInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.COPY_INSTRUCTION:
      {
        CopyInstruction copyInstruction = (CopyInstruction)theEObject;
        T result = caseCopyInstruction(copyInstruction);
        if (result == null) result = caseDockerInstruction(copyInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.EXPOSE_INSTRUCTION:
      {
        ExposeInstruction exposeInstruction = (ExposeInstruction)theEObject;
        T result = caseExposeInstruction(exposeInstruction);
        if (result == null) result = caseDockerInstruction(exposeInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.ENV_INSTRUCTION:
      {
        EnvInstruction envInstruction = (EnvInstruction)theEObject;
        T result = caseEnvInstruction(envInstruction);
        if (result == null) result = caseDockerInstruction(envInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.WORKDIR_INSTRUCTION:
      {
        WorkdirInstruction workdirInstruction = (WorkdirInstruction)theEObject;
        T result = caseWorkdirInstruction(workdirInstruction);
        if (result == null) result = caseDockerInstruction(workdirInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.CMD_INSTRUCTION:
      {
        CmdInstruction cmdInstruction = (CmdInstruction)theEObject;
        T result = caseCmdInstruction(cmdInstruction);
        if (result == null) result = caseDockerInstruction(cmdInstruction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.ANGULAR_APP:
      {
        AngularApp angularApp = (AngularApp)theEObject;
        T result = caseAngularApp(angularApp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.ANGULAR_COMPONENT:
      {
        AngularComponent angularComponent = (AngularComponent)theEObject;
        T result = caseAngularComponent(angularComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.ANGULAR_SERVICE:
      {
        AngularService angularService = (AngularService)theEObject;
        T result = caseAngularService(angularService);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.ANGULAR_SERVICE_METHOD:
      {
        AngularServiceMethod angularServiceMethod = (AngularServiceMethod)theEObject;
        T result = caseAngularServiceMethod(angularServiceMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.ANGULAR_MODULE:
      {
        AngularModule angularModule = (AngularModule)theEObject;
        T result = caseAngularModule(angularModule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SpringgenPackage.ANGULAR_MODULE_IMPORT:
      {
        AngularModuleImport angularModuleImport = (AngularModuleImport)theEObject;
        T result = caseAngularModuleImport(angularModuleImport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Spring Boot Project</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Spring Boot Project</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpringBootProject(SpringBootProject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Project Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Project Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProjectElement(ProjectElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Relationship</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Relationship</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityRelationship(EntityRelationship object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Project Configuration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Project Configuration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProjectConfiguration(ProjectConfiguration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Server Configuration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Server Configuration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseServerConfiguration(ServerConfiguration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Database Configuration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Database Configuration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatabaseConfiguration(DatabaseConfiguration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntity(Entity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdentifier(Identifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DTO</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DTO</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDTO(DTO object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Service</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Service</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseService(Service object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Controller</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Controller</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseController(Controller object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Service Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Service Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseServiceAction(ServiceAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Custom Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Custom Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCustomAction(CustomAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActionParameter(ActionParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Repository</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Repository</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRepository(Repository object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Find By Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Find By Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFindByMethod(FindByMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delete By Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delete By Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeleteByMethod(DeleteByMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Custom Query Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Custom Query Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCustomQueryMethod(CustomQueryMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProperty(Property object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturnType(ReturnType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListType(ListType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetType(SetType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value Types</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value Types</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueTypes(ValueTypes object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Http Methods</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Http Methods</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHttpMethods(HttpMethods object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RDBMS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RDBMS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRDBMS(RDBMS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Database Relations</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Database Relations</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatabaseRelations(DatabaseRelations object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Param Transfer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Param Transfer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParamTransfer(ParamTransfer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dockerfile</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dockerfile</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDockerfile(Dockerfile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Base Image</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Base Image</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBaseImage(BaseImage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Docker Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Docker Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDockerInstruction(DockerInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Run Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Run Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRunInstruction(RunInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Copy Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Copy Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCopyInstruction(CopyInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expose Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expose Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExposeInstruction(ExposeInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Env Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Env Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnvInstruction(EnvInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Workdir Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Workdir Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWorkdirInstruction(WorkdirInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cmd Instruction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cmd Instruction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCmdInstruction(CmdInstruction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Angular App</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Angular App</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAngularApp(AngularApp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Angular Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Angular Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAngularComponent(AngularComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Angular Service</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Angular Service</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAngularService(AngularService object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Angular Service Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Angular Service Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAngularServiceMethod(AngularServiceMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Angular Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Angular Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAngularModule(AngularModule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Angular Module Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Angular Module Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAngularModuleImport(AngularModuleImport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SpringgenSwitch
