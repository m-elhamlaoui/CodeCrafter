/**
 * generated by Xtext 2.37.0
 */
package org.xtext.example.springgen.springgen.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.springgen.springgen.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SpringgenFactoryImpl extends EFactoryImpl implements SpringgenFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SpringgenFactory init()
  {
    try
    {
      SpringgenFactory theSpringgenFactory = (SpringgenFactory)EPackage.Registry.INSTANCE.getEFactory(SpringgenPackage.eNS_URI);
      if (theSpringgenFactory != null)
      {
        return theSpringgenFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SpringgenFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpringgenFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SpringgenPackage.SPRING_BOOT_PROJECT: return createSpringBootProject();
      case SpringgenPackage.PROJECT_ELEMENT: return createProjectElement();
      case SpringgenPackage.ENTITY_RELATIONSHIP: return createEntityRelationship();
      case SpringgenPackage.PROJECT_CONFIGURATION: return createProjectConfiguration();
      case SpringgenPackage.SERVER_CONFIGURATION: return createServerConfiguration();
      case SpringgenPackage.DATABASE_CONFIGURATION: return createDatabaseConfiguration();
      case SpringgenPackage.ENTITY: return createEntity();
      case SpringgenPackage.IDENTIFIER: return createIdentifier();
      case SpringgenPackage.DTO: return createDTO();
      case SpringgenPackage.SERVICE: return createService();
      case SpringgenPackage.CONTROLLER: return createController();
      case SpringgenPackage.SERVICE_ACTION: return createServiceAction();
      case SpringgenPackage.CUSTOM_ACTION: return createCustomAction();
      case SpringgenPackage.ACTION_PARAMETER: return createActionParameter();
      case SpringgenPackage.REPOSITORY: return createRepository();
      case SpringgenPackage.FIND_BY_METHOD: return createFindByMethod();
      case SpringgenPackage.DELETE_BY_METHOD: return createDeleteByMethod();
      case SpringgenPackage.CUSTOM_QUERY_METHOD: return createCustomQueryMethod();
      case SpringgenPackage.PROPERTY: return createProperty();
      case SpringgenPackage.TYPE: return createType();
      case SpringgenPackage.RETURN_TYPE: return createReturnType();
      case SpringgenPackage.LIST_TYPE: return createListType();
      case SpringgenPackage.SET_TYPE: return createSetType();
      case SpringgenPackage.VALUE_TYPES: return createValueTypes();
      case SpringgenPackage.HTTP_METHODS: return createHttpMethods();
      case SpringgenPackage.RDBMS: return createRDBMS();
      case SpringgenPackage.DATABASE_RELATIONS: return createDatabaseRelations();
      case SpringgenPackage.PARAM_TRANSFER: return createParamTransfer();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpringBootProject createSpringBootProject()
  {
    SpringBootProjectImpl springBootProject = new SpringBootProjectImpl();
    return springBootProject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProjectElement createProjectElement()
  {
    ProjectElementImpl projectElement = new ProjectElementImpl();
    return projectElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityRelationship createEntityRelationship()
  {
    EntityRelationshipImpl entityRelationship = new EntityRelationshipImpl();
    return entityRelationship;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProjectConfiguration createProjectConfiguration()
  {
    ProjectConfigurationImpl projectConfiguration = new ProjectConfigurationImpl();
    return projectConfiguration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServerConfiguration createServerConfiguration()
  {
    ServerConfigurationImpl serverConfiguration = new ServerConfigurationImpl();
    return serverConfiguration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DatabaseConfiguration createDatabaseConfiguration()
  {
    DatabaseConfigurationImpl databaseConfiguration = new DatabaseConfigurationImpl();
    return databaseConfiguration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Identifier createIdentifier()
  {
    IdentifierImpl identifier = new IdentifierImpl();
    return identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DTO createDTO()
  {
    DTOImpl dto = new DTOImpl();
    return dto;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Service createService()
  {
    ServiceImpl service = new ServiceImpl();
    return service;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Controller createController()
  {
    ControllerImpl controller = new ControllerImpl();
    return controller;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServiceAction createServiceAction()
  {
    ServiceActionImpl serviceAction = new ServiceActionImpl();
    return serviceAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CustomAction createCustomAction()
  {
    CustomActionImpl customAction = new CustomActionImpl();
    return customAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionParameter createActionParameter()
  {
    ActionParameterImpl actionParameter = new ActionParameterImpl();
    return actionParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Repository createRepository()
  {
    RepositoryImpl repository = new RepositoryImpl();
    return repository;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FindByMethod createFindByMethod()
  {
    FindByMethodImpl findByMethod = new FindByMethodImpl();
    return findByMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeleteByMethod createDeleteByMethod()
  {
    DeleteByMethodImpl deleteByMethod = new DeleteByMethodImpl();
    return deleteByMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CustomQueryMethod createCustomQueryMethod()
  {
    CustomQueryMethodImpl customQueryMethod = new CustomQueryMethodImpl();
    return customQueryMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnType createReturnType()
  {
    ReturnTypeImpl returnType = new ReturnTypeImpl();
    return returnType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListType createListType()
  {
    ListTypeImpl listType = new ListTypeImpl();
    return listType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetType createSetType()
  {
    SetTypeImpl setType = new SetTypeImpl();
    return setType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueTypes createValueTypes()
  {
    ValueTypesImpl valueTypes = new ValueTypesImpl();
    return valueTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HttpMethods createHttpMethods()
  {
    HttpMethodsImpl httpMethods = new HttpMethodsImpl();
    return httpMethods;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RDBMS createRDBMS()
  {
    RDBMSImpl rdbms = new RDBMSImpl();
    return rdbms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DatabaseRelations createDatabaseRelations()
  {
    DatabaseRelationsImpl databaseRelations = new DatabaseRelationsImpl();
    return databaseRelations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamTransfer createParamTransfer()
  {
    ParamTransferImpl paramTransfer = new ParamTransferImpl();
    return paramTransfer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpringgenPackage getSpringgenPackage()
  {
    return (SpringgenPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SpringgenPackage getPackage()
  {
    return SpringgenPackage.eINSTANCE;
  }

} //SpringgenFactoryImpl
