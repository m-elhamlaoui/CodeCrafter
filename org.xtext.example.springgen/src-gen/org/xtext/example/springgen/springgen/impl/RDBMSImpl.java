/**
 * generated by Xtext 2.37.0
 */
package org.xtext.example.springgen.springgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.springgen.springgen.RDBMS;
import org.xtext.example.springgen.springgen.SpringgenPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>RDBMS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.springgen.springgen.impl.RDBMSImpl#getMYSQL <em>MYSQL</em>}</li>
 *   <li>{@link org.xtext.example.springgen.springgen.impl.RDBMSImpl#getPOSTGRES <em>POSTGRES</em>}</li>
 *   <li>{@link org.xtext.example.springgen.springgen.impl.RDBMSImpl#getMARIADB <em>MARIADB</em>}</li>
 *   <li>{@link org.xtext.example.springgen.springgen.impl.RDBMSImpl#getH2 <em>H2</em>}</li>
 *   <li>{@link org.xtext.example.springgen.springgen.impl.RDBMSImpl#getORACLE <em>ORACLE</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RDBMSImpl extends MinimalEObjectImpl.Container implements RDBMS
{
  /**
   * The default value of the '{@link #getMYSQL() <em>MYSQL</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMYSQL()
   * @generated
   * @ordered
   */
  protected static final String MYSQL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMYSQL() <em>MYSQL</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMYSQL()
   * @generated
   * @ordered
   */
  protected String mysql = MYSQL_EDEFAULT;

  /**
   * The default value of the '{@link #getPOSTGRES() <em>POSTGRES</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPOSTGRES()
   * @generated
   * @ordered
   */
  protected static final String POSTGRES_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPOSTGRES() <em>POSTGRES</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPOSTGRES()
   * @generated
   * @ordered
   */
  protected String postgres = POSTGRES_EDEFAULT;

  /**
   * The default value of the '{@link #getMARIADB() <em>MARIADB</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMARIADB()
   * @generated
   * @ordered
   */
  protected static final String MARIADB_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMARIADB() <em>MARIADB</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMARIADB()
   * @generated
   * @ordered
   */
  protected String mariadb = MARIADB_EDEFAULT;

  /**
   * The default value of the '{@link #getH2() <em>H2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getH2()
   * @generated
   * @ordered
   */
  protected static final String H2_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getH2() <em>H2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getH2()
   * @generated
   * @ordered
   */
  protected String h2 = H2_EDEFAULT;

  /**
   * The default value of the '{@link #getORACLE() <em>ORACLE</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getORACLE()
   * @generated
   * @ordered
   */
  protected static final String ORACLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getORACLE() <em>ORACLE</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getORACLE()
   * @generated
   * @ordered
   */
  protected String oracle = ORACLE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RDBMSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SpringgenPackage.Literals.RDBMS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMYSQL()
  {
    return mysql;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMYSQL(String newMYSQL)
  {
    String oldMYSQL = mysql;
    mysql = newMYSQL;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringgenPackage.RDBMS__MYSQL, oldMYSQL, mysql));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPOSTGRES()
  {
    return postgres;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPOSTGRES(String newPOSTGRES)
  {
    String oldPOSTGRES = postgres;
    postgres = newPOSTGRES;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringgenPackage.RDBMS__POSTGRES, oldPOSTGRES, postgres));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMARIADB()
  {
    return mariadb;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMARIADB(String newMARIADB)
  {
    String oldMARIADB = mariadb;
    mariadb = newMARIADB;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringgenPackage.RDBMS__MARIADB, oldMARIADB, mariadb));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getH2()
  {
    return h2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setH2(String newH2)
  {
    String oldH2 = h2;
    h2 = newH2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringgenPackage.RDBMS__H2, oldH2, h2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getORACLE()
  {
    return oracle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setORACLE(String newORACLE)
  {
    String oldORACLE = oracle;
    oracle = newORACLE;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringgenPackage.RDBMS__ORACLE, oldORACLE, oracle));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SpringgenPackage.RDBMS__MYSQL:
        return getMYSQL();
      case SpringgenPackage.RDBMS__POSTGRES:
        return getPOSTGRES();
      case SpringgenPackage.RDBMS__MARIADB:
        return getMARIADB();
      case SpringgenPackage.RDBMS__H2:
        return getH2();
      case SpringgenPackage.RDBMS__ORACLE:
        return getORACLE();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SpringgenPackage.RDBMS__MYSQL:
        setMYSQL((String)newValue);
        return;
      case SpringgenPackage.RDBMS__POSTGRES:
        setPOSTGRES((String)newValue);
        return;
      case SpringgenPackage.RDBMS__MARIADB:
        setMARIADB((String)newValue);
        return;
      case SpringgenPackage.RDBMS__H2:
        setH2((String)newValue);
        return;
      case SpringgenPackage.RDBMS__ORACLE:
        setORACLE((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SpringgenPackage.RDBMS__MYSQL:
        setMYSQL(MYSQL_EDEFAULT);
        return;
      case SpringgenPackage.RDBMS__POSTGRES:
        setPOSTGRES(POSTGRES_EDEFAULT);
        return;
      case SpringgenPackage.RDBMS__MARIADB:
        setMARIADB(MARIADB_EDEFAULT);
        return;
      case SpringgenPackage.RDBMS__H2:
        setH2(H2_EDEFAULT);
        return;
      case SpringgenPackage.RDBMS__ORACLE:
        setORACLE(ORACLE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SpringgenPackage.RDBMS__MYSQL:
        return MYSQL_EDEFAULT == null ? mysql != null : !MYSQL_EDEFAULT.equals(mysql);
      case SpringgenPackage.RDBMS__POSTGRES:
        return POSTGRES_EDEFAULT == null ? postgres != null : !POSTGRES_EDEFAULT.equals(postgres);
      case SpringgenPackage.RDBMS__MARIADB:
        return MARIADB_EDEFAULT == null ? mariadb != null : !MARIADB_EDEFAULT.equals(mariadb);
      case SpringgenPackage.RDBMS__H2:
        return H2_EDEFAULT == null ? h2 != null : !H2_EDEFAULT.equals(h2);
      case SpringgenPackage.RDBMS__ORACLE:
        return ORACLE_EDEFAULT == null ? oracle != null : !ORACLE_EDEFAULT.equals(oracle);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (MYSQL: ");
    result.append(mysql);
    result.append(", POSTGRES: ");
    result.append(postgres);
    result.append(", MARIADB: ");
    result.append(mariadb);
    result.append(", H2: ");
    result.append(h2);
    result.append(", ORACLE: ");
    result.append(oracle);
    result.append(')');
    return result.toString();
  }

} //RDBMSImpl
