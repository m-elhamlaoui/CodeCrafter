/**
 * generated by Xtext 2.37.0
 */
package org.xtext.example.springgen.springgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.springgen.springgen.DatabaseRelations;
import org.xtext.example.springgen.springgen.SpringgenPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Database Relations</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.springgen.springgen.impl.DatabaseRelationsImpl#getM2M <em>M2M</em>}</li>
 *   <li>{@link org.xtext.example.springgen.springgen.impl.DatabaseRelationsImpl#getM2O <em>M2O</em>}</li>
 *   <li>{@link org.xtext.example.springgen.springgen.impl.DatabaseRelationsImpl#getO2M <em>O2M</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DatabaseRelationsImpl extends MinimalEObjectImpl.Container implements DatabaseRelations
{
  /**
   * The default value of the '{@link #getM2M() <em>M2M</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getM2M()
   * @generated
   * @ordered
   */
  protected static final String M2M_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getM2M() <em>M2M</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getM2M()
   * @generated
   * @ordered
   */
  protected String m2M = M2M_EDEFAULT;

  /**
   * The default value of the '{@link #getM2O() <em>M2O</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getM2O()
   * @generated
   * @ordered
   */
  protected static final String M2O_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getM2O() <em>M2O</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getM2O()
   * @generated
   * @ordered
   */
  protected String m2O = M2O_EDEFAULT;

  /**
   * The default value of the '{@link #getO2M() <em>O2M</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getO2M()
   * @generated
   * @ordered
   */
  protected static final String O2M_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getO2M() <em>O2M</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getO2M()
   * @generated
   * @ordered
   */
  protected String o2M = O2M_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DatabaseRelationsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SpringgenPackage.Literals.DATABASE_RELATIONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getM2M()
  {
    return m2M;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setM2M(String newM2M)
  {
    String oldM2M = m2M;
    m2M = newM2M;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringgenPackage.DATABASE_RELATIONS__M2M, oldM2M, m2M));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getM2O()
  {
    return m2O;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setM2O(String newM2O)
  {
    String oldM2O = m2O;
    m2O = newM2O;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringgenPackage.DATABASE_RELATIONS__M2O, oldM2O, m2O));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getO2M()
  {
    return o2M;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setO2M(String newO2M)
  {
    String oldO2M = o2M;
    o2M = newO2M;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringgenPackage.DATABASE_RELATIONS__O2M, oldO2M, o2M));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SpringgenPackage.DATABASE_RELATIONS__M2M:
        return getM2M();
      case SpringgenPackage.DATABASE_RELATIONS__M2O:
        return getM2O();
      case SpringgenPackage.DATABASE_RELATIONS__O2M:
        return getO2M();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SpringgenPackage.DATABASE_RELATIONS__M2M:
        setM2M((String)newValue);
        return;
      case SpringgenPackage.DATABASE_RELATIONS__M2O:
        setM2O((String)newValue);
        return;
      case SpringgenPackage.DATABASE_RELATIONS__O2M:
        setO2M((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SpringgenPackage.DATABASE_RELATIONS__M2M:
        setM2M(M2M_EDEFAULT);
        return;
      case SpringgenPackage.DATABASE_RELATIONS__M2O:
        setM2O(M2O_EDEFAULT);
        return;
      case SpringgenPackage.DATABASE_RELATIONS__O2M:
        setO2M(O2M_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SpringgenPackage.DATABASE_RELATIONS__M2M:
        return M2M_EDEFAULT == null ? m2M != null : !M2M_EDEFAULT.equals(m2M);
      case SpringgenPackage.DATABASE_RELATIONS__M2O:
        return M2O_EDEFAULT == null ? m2O != null : !M2O_EDEFAULT.equals(m2O);
      case SpringgenPackage.DATABASE_RELATIONS__O2M:
        return O2M_EDEFAULT == null ? o2M != null : !O2M_EDEFAULT.equals(o2M);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (M2M: ");
    result.append(m2M);
    result.append(", M2O: ");
    result.append(m2O);
    result.append(", O2M: ");
    result.append(o2M);
    result.append(')');
    return result.toString();
  }

} //DatabaseRelationsImpl
