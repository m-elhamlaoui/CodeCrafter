/**
 * generated by Xtext 2.37.0
 */
package org.xtext.example.springgen.springgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.springgen.springgen.DatabaseRelations;
import org.xtext.example.springgen.springgen.SpringgenPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Database Relations</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.springgen.springgen.impl.DatabaseRelationsImpl#getMANY_TO_MANY <em>MANY TO MANY</em>}</li>
 *   <li>{@link org.xtext.example.springgen.springgen.impl.DatabaseRelationsImpl#getMANY_TO_ONE <em>MANY TO ONE</em>}</li>
 *   <li>{@link org.xtext.example.springgen.springgen.impl.DatabaseRelationsImpl#getONE_TO_MANY <em>ONE TO MANY</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DatabaseRelationsImpl extends MinimalEObjectImpl.Container implements DatabaseRelations
{
  /**
   * The default value of the '{@link #getMANY_TO_MANY() <em>MANY TO MANY</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMANY_TO_MANY()
   * @generated
   * @ordered
   */
  protected static final String MANY_TO_MANY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMANY_TO_MANY() <em>MANY TO MANY</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMANY_TO_MANY()
   * @generated
   * @ordered
   */
  protected String manY_TO_MANY = MANY_TO_MANY_EDEFAULT;

  /**
   * The default value of the '{@link #getMANY_TO_ONE() <em>MANY TO ONE</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMANY_TO_ONE()
   * @generated
   * @ordered
   */
  protected static final String MANY_TO_ONE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMANY_TO_ONE() <em>MANY TO ONE</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMANY_TO_ONE()
   * @generated
   * @ordered
   */
  protected String manY_TO_ONE = MANY_TO_ONE_EDEFAULT;

  /**
   * The default value of the '{@link #getONE_TO_MANY() <em>ONE TO MANY</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getONE_TO_MANY()
   * @generated
   * @ordered
   */
  protected static final String ONE_TO_MANY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getONE_TO_MANY() <em>ONE TO MANY</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getONE_TO_MANY()
   * @generated
   * @ordered
   */
  protected String onE_TO_MANY = ONE_TO_MANY_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DatabaseRelationsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SpringgenPackage.Literals.DATABASE_RELATIONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMANY_TO_MANY()
  {
    return manY_TO_MANY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMANY_TO_MANY(String newMANY_TO_MANY)
  {
    String oldMANY_TO_MANY = manY_TO_MANY;
    manY_TO_MANY = newMANY_TO_MANY;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringgenPackage.DATABASE_RELATIONS__MANY_TO_MANY, oldMANY_TO_MANY, manY_TO_MANY));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMANY_TO_ONE()
  {
    return manY_TO_ONE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMANY_TO_ONE(String newMANY_TO_ONE)
  {
    String oldMANY_TO_ONE = manY_TO_ONE;
    manY_TO_ONE = newMANY_TO_ONE;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringgenPackage.DATABASE_RELATIONS__MANY_TO_ONE, oldMANY_TO_ONE, manY_TO_ONE));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getONE_TO_MANY()
  {
    return onE_TO_MANY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setONE_TO_MANY(String newONE_TO_MANY)
  {
    String oldONE_TO_MANY = onE_TO_MANY;
    onE_TO_MANY = newONE_TO_MANY;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpringgenPackage.DATABASE_RELATIONS__ONE_TO_MANY, oldONE_TO_MANY, onE_TO_MANY));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SpringgenPackage.DATABASE_RELATIONS__MANY_TO_MANY:
        return getMANY_TO_MANY();
      case SpringgenPackage.DATABASE_RELATIONS__MANY_TO_ONE:
        return getMANY_TO_ONE();
      case SpringgenPackage.DATABASE_RELATIONS__ONE_TO_MANY:
        return getONE_TO_MANY();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SpringgenPackage.DATABASE_RELATIONS__MANY_TO_MANY:
        setMANY_TO_MANY((String)newValue);
        return;
      case SpringgenPackage.DATABASE_RELATIONS__MANY_TO_ONE:
        setMANY_TO_ONE((String)newValue);
        return;
      case SpringgenPackage.DATABASE_RELATIONS__ONE_TO_MANY:
        setONE_TO_MANY((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SpringgenPackage.DATABASE_RELATIONS__MANY_TO_MANY:
        setMANY_TO_MANY(MANY_TO_MANY_EDEFAULT);
        return;
      case SpringgenPackage.DATABASE_RELATIONS__MANY_TO_ONE:
        setMANY_TO_ONE(MANY_TO_ONE_EDEFAULT);
        return;
      case SpringgenPackage.DATABASE_RELATIONS__ONE_TO_MANY:
        setONE_TO_MANY(ONE_TO_MANY_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SpringgenPackage.DATABASE_RELATIONS__MANY_TO_MANY:
        return MANY_TO_MANY_EDEFAULT == null ? manY_TO_MANY != null : !MANY_TO_MANY_EDEFAULT.equals(manY_TO_MANY);
      case SpringgenPackage.DATABASE_RELATIONS__MANY_TO_ONE:
        return MANY_TO_ONE_EDEFAULT == null ? manY_TO_ONE != null : !MANY_TO_ONE_EDEFAULT.equals(manY_TO_ONE);
      case SpringgenPackage.DATABASE_RELATIONS__ONE_TO_MANY:
        return ONE_TO_MANY_EDEFAULT == null ? onE_TO_MANY != null : !ONE_TO_MANY_EDEFAULT.equals(onE_TO_MANY);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (MANY_TO_MANY: ");
    result.append(manY_TO_MANY);
    result.append(", MANY_TO_ONE: ");
    result.append(manY_TO_ONE);
    result.append(", ONE_TO_MANY: ");
    result.append(onE_TO_MANY);
    result.append(')');
    return result.toString();
  }

} //DatabaseRelationsImpl
