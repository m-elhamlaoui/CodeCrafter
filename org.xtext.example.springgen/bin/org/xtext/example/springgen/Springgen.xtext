grammar org.xtext.example.springgen.SpringGen with org.eclipse.xtext.common.Terminals

generate springgen "http://www.xtext.org/example/springgen/springgen"

SpringBootProject:
    'project' name=ID
    configuration=ProjectConfiguration?
    elements+=ProjectElement*
    dockerfile=Dockerfile?;

ProjectElement:
    Entity | EntityRelationship | DTO | Service | Repository | Controller;

EntityRelationship:
    'relation' type=DatabaseRelations 'between' source=[Entity] 'and' target=[Entity];

ProjectConfiguration:
    'config' '{'
        server=ServerConfiguration?
        database=DatabaseConfiguration
    '}';

ServerConfiguration:
    'server' '{'
        'port' port=INT
        ('contextPath' contextPath=STRING)?
    '}';

DatabaseConfiguration:
    'database' '{'
        'dbms' type=RDBMS
        'name' name=ID
        'port' port=INT
        'username' username=ID
        'password' password=ID
    '}';

Entity:
    'entity' name=ID ('inherits' extends=[Entity])? '{'
        identifier=Identifier
        properties+=Property*
        repository=Repository?
        services+=Service*
        controller=Controller?
    '}';

Identifier:
    'Id' name=ID type=ValueTypes;

DTO:
    'dto' name=ID '{'
        properties+=Property*
    '}';

Service:
    'service' name=ID ('pertainingTo' entity=[Entity])? '{'
        actions+=ServiceAction*
    '}';

Controller:
    'controller' '{'
        baseUrl=STRING?
        customActions+=CustomAction*
        ('create' 'entity:' createParam=ParamTransfer)?
        ('find' 'entity:' findParam=ParamTransfer)?
        ('delete' 'entity:' deleteParam=ParamTransfer)?
    '}';

ServiceAction:
    'operation' name=ID '{'
        'returns' returnType=ReturnType
        ('raises' exceptionType=Type)?
        ('implementation' implementation=STRING)?
        'params' '(' parameters+=ActionParameter* ')'
    '}';

CustomAction:
    method=HttpMethods 'action' name=ID '{'
        ('mappedAt' url=STRING)?
        parameters+=ActionParameter*
    '}';

ActionParameter:
    name=ID ':' type=Type ('default' defaultValue=STRING)?;

Repository:
    'repository' '{'
        findBy+=FindByMethod*
        deleteBy+=DeleteByMethod*
        customQueryMethod+=CustomQueryMethod*
    '}';

FindByMethod:
    'find' 'by' property=ID ':' propertyType=ValueTypes;

DeleteByMethod:
    'delete' 'by' property=ID ':' propertyType=ValueTypes;

CustomQueryMethod:
    'customQuery' '{' query=STRING '}';

Property:
    name=ID ':' type=Type ('default' defaultValue=STRING)?;

Type:
    ValueTypes | ListType | SetType;

ReturnType:
    ValueTypes | ListType | ID;

ListType:
    'List<' type=Type '>';

SetType:
    'Set<' type=Type '>';

ValueTypes:
    FLOAT='float' | LONG='long' | INTEGER='int' | CHAR='char' | BOOLEAN='boolean' | BYTE='byte' | STRING='String';

HttpMethods:
    GET="GET" | DELETE="DELETE" | POST="POST" | PUT="PUT" | PATCH="PATCH";

RDBMS:
    MYSQL="MySQL" | POSTGRES="Postgres" | MARIADB="MariaDB" | H2="H2" | ORACLE="Oracle";

DatabaseRelations:
    MANY_TO_MANY="ManyToMany" | MANY_TO_ONE="ManyToOne" | ONE_TO_MANY="OneToMany";

ParamTransfer:
    REQUEST_BODY="RequestBody" | REQUEST_PARAM="RequestParam" | PATH_VARIABLE="PathVariable";

Dockerfile:
    'dockerfile' '{'
        baseImage=BaseImage
        instructions+=DockerInstruction*
    '}';

BaseImage:
    'FROM' image=STRING;

DockerInstruction:
    RunInstruction | CopyInstruction | ExposeInstruction | EnvInstruction | WorkdirInstruction | CmdInstruction;

RunInstruction:
    'RUN' command=STRING;

CopyInstruction:
    'COPY' source=STRING ':' target=STRING;

ExposeInstruction:
    'EXPOSE' port=INT;

EnvInstruction:
    'ENV' key=ID value=STRING;

WorkdirInstruction:
    'WORKDIR' path=STRING;

CmdInstruction:
    'CMD' command=STRING;
